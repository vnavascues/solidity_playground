truffle(develop)> Faucet5
[Function: TruffleContract] {
  _constructorMethods: {
    configureNetwork: [Function: configureNetwork],
    setProvider: [Function: setProvider],
    new: [Function: new],
    at: [AsyncFunction: at],
    deployed: [AsyncFunction: deployed],
    defaults: [Function: defaults],
    hasNetwork: [Function: hasNetwork],
    isDeployed: [Function: isDeployed],
    detectNetwork: [AsyncFunction: detectNetwork],
    setNetwork: [Function: setNetwork],
    setNetworkType: [Function: setNetworkType],
    setWallet: [Function: setWallet],
    resetAddress: [Function: resetAddress],
    link: [Function: link],
    clone: [Function: clone],
    addProp: [Function: addProp],
    toJSON: [Function: toJSON],
    decodeLogs: [Function: decodeLogs]
  },
  _properties: {
    contract_name: { get: [Function: get], set: [Function: set] },
    contractName: { get: [Function: get], set: [Function: set] },
    gasMultiplier: { get: [Function: get], set: [Function: set] },
    timeoutBlocks: { get: [Function: get], set: [Function: set] },
    autoGas: { get: [Function: get], set: [Function: set] },
    numberFormat: { get: [Function: get], set: [Function: set] },
    abi: { get: [Function: get], set: [Function: set] },
    metadata: [Function: metadata],
    network: [Function: network],
    networks: [Function: networks],
    address: { get: [Function: get], set: [Function: set] },
    transactionHash: { get: [Function: get], set: [Function: set] },
    links: [Function: links],
    events: [Function: events],
    binary: [Function: binary],
    deployedBinary: [Function: deployedBinary],
    unlinked_binary: { get: [Function: get], set: [Function: set] },
    bytecode: { get: [Function: get], set: [Function: set] },
    deployedBytecode: { get: [Function: get], set: [Function: set] },
    sourceMap: { get: [Function: get], set: [Function: set] },
    deployedSourceMap: { get: [Function: get], set: [Function: set] },
    source: { get: [Function: get], set: [Function: set] },
    sourcePath: { get: [Function: get], set: [Function: set] },
    legacyAST: { get: [Function: get], set: [Function: set] },
    ast: { get: [Function: get], set: [Function: set] },
    compiler: { get: [Function: get], set: [Function: set] },
    schema_version: [Function: schema_version],
    schemaVersion: [Function: schemaVersion],
    updated_at: [Function: updated_at],
    updatedAt: [Function: updatedAt],
    userdoc: [Function: userdoc],
    devdoc: [Function: devdoc],
    networkType: { get: [Function: get], set: [Function: set] },
    immutableReferences: { get: [Function: get], set: [Function: set] }
  },
  _property_values: {},
  _json: {
    contractName: 'Faucet5',
    abi: [ [Object], [Object], [Object], [Object], [Object] ],
    metadata: '{"compiler":{"version":"0.6.10+commit.00c0fcaf"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[],"name":"destroy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Victor Navascues","details":"Inherits from Mortal5 and implements withdrawal","methods":{"destroy()":{"details":"In case `owner` was not payable, call `payable(owner)`"},"withdraw(uint256)":{"details":"Limit the withdraw amount to 0.1\\u039e. It emits the Withdrawal event","params":{"withdrawAmount":"the requested ether amount"}}},"title":"Mastering Ethereum Chapter 6, Faucet contract v5-8"},"userdoc":{"methods":{"withdraw(uint256)":{"notice":"Give out ether to anyone who asks"}},"notice":"Faucet4 applying contract inheritance, error handling, events, and NatSpec documentation"}},"settings":{"compilationTarget":{"/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Faucet5.sol":"Faucet5"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Faucet5.sol":{"keccak256":"0xbb0862076586c1afd4100105c6d56e8b2e77721cccfad3925e1687f7c9866e8e","license":"MIT","urls":["bzz-raw://2a30e07c862fc01decc5a2cb89268e142a03d7a6566cb6c4468b4c33e4a07db5","dweb:/ipfs/QmRNm4X4Ri6JHxREDjvrjrPjcnundyB554F7WDyyKUmeZG"]},"/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Mortal5.sol":{"keccak256":"0x5e28db83cd8ad072cca8631a2c623d5874b85d669c336d05c14aae4bf9e2ca71","license":"MIT","urls":["bzz-raw://3189369b1fc0b4cc315c99ff6c1dc5d11f452cc9df2dcd48db51825cb785aa0f","dweb:/ipfs/QmeztGuNgmpC6GmPSpDucs3sSY7fLNsZtgj81hbmCXfpwZ"]},"/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Owned5.sol":{"keccak256":"0xa399941705cefd92ebef59ce1486300ac205d6a1834112fe455eebf4204da626","license":"MIT","urls":["bzz-raw://45f99bb24845ba60ef9c538063092cfd93047d0eda43167647510f18fd0e2c45","dweb:/ipfs/QmZAx2nBFVCABb3mWUPGj8KpvjcxREFhzZDqQ9Nw1EHjgL"]}},"version":1}',
    bytecode: '0x608060405230600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610390806100a16000396000f3fe60806040526004361061002d5760003560e01c80632e1a7d4d1461008757806383197ef0146100c257610082565b36610082573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2005b600080fd5b34801561009357600080fd5b506100c0600480360360208110156100aa57600080fd5b81019080803590602001909291905050506100d9565b005b3480156100ce57600080fd5b506100d7610218565b005b67016345785d8a00008111156100ee57600080fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16311015610180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806103266035913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101c6573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806102f8602e913960400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16fffe4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c20746869732066756e6374696f6e496e73756666696369656e742062616c616e636520696e2066617563657420666f72207769746864726177616c2072657175657374a2646970667358221220abcb4a657c0bb80d74e6c0c34e4c63b79603a4272661b11a5b8ac71a1145486064736f6c634300060a0033',
    deployedBytecode: '0x60806040526004361061002d5760003560e01c80632e1a7d4d1461008757806383197ef0146100c257610082565b36610082573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2005b600080fd5b34801561009357600080fd5b506100c0600480360360208110156100aa57600080fd5b81019080803590602001909291905050506100d9565b005b3480156100ce57600080fd5b506100d7610218565b005b67016345785d8a00008111156100ee57600080fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16311015610180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806103266035913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101c6573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806102f8602e913960400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16fffe4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c20746869732066756e6374696f6e496e73756666696369656e742062616c616e636520696e2066617563657420666f72207769746864726177616c2072657175657374a2646970667358221220abcb4a657c0bb80d74e6c0c34e4c63b79603a4272661b11a5b8ac71a1145486064736f6c634300060a0033',
    immutableReferences: {},
    sourceMap: '338:823:0:-:0;;;660:4:3;623:42;;;;;;;;;;;;;;;;;;;;338:823:0;;;;;;;;;;711:10:3;703:5;;:18;;;;;;;;;;;;;;;;;;338:823:0;;;;;;',
    deployedSourceMap: '338:823:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;519:10;511:30;;;531:9;511:30;;;;;;;;;;;;;;;;;;338:823;;;;;753:406;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1157:72:2;;;;;;;;;;;;;:::i;:::-;;753:406:0;838:9;820:14;:27;;812:36;;;;;;961:14;940:9;;;;;;;;;;;:17;;;:35;;919:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1064:10;:19;;:35;1084:14;1064:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1125:10;1114:38;;;1137:14;1114:38;;;;;;;;;;;;;;;;;;753:406;:::o;1157:72:2:-;922:5:3;;;;;;;;;;;908:19;;:10;:19;;;887:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1216:5:2::1;::::0;::::1;;;;;;;;;1203:19;;',
    source: '// SPDX-License-Identifier: MIT\n' +
      'pragma solidity ^0.6.0;\n' +
      '\n' +
      'import "./Mortal5.sol";\n' +
      '\n' +
      '/**\n' +
      ' * @title Mastering Ethereum Chapter 6, Faucet contract v5-8\n' +
      ' * @author Victor Navascues\n' +
      ' * @notice Faucet4 applying contract inheritance, error handling, events, and\n' +
      ' * NatSpec documentation\n' +
      ' * @dev Inherits from Mortal5 and implements withdrawal\n' +
      ' */\n' +
      'contract Faucet5 is Mortal5 {\n' +
      '    /**\n' +
      '     * @notice Accept any incoming amount\n' +
      '     * @dev It emits the Diposit event\n' +
      '     */\n' +
      '    receive() external payable {\n' +
      '        emit Deposit(msg.sender, msg.value);\n' +
      '    }\n' +
      '\n' +
      '    /**\n' +
      '     * @notice Give out ether to anyone who asks\n' +
      '     * @dev Limit the withdraw amount to 0.1Ξ. It emits the Withdrawal event\n' +
      '     * @param withdrawAmount the requested ether amount\n' +
      '     */\n' +
      '    function withdraw(uint256 withdrawAmount) public {\n' +
      '        require(withdrawAmount <= 0.1 ether);\n' +
      '        // NB: This check increases gas consumption slightly\n' +
      '        require(\n' +
      '            myAddress.balance >= withdrawAmount,\n' +
      '            "Insufficient balance in faucet for withdrawal request"\n' +
      '        );\n' +
      '        msg.sender.transfer(withdrawAmount);\n' +
      '        emit Withdrawal(msg.sender, withdrawAmount);\n' +
      '    }\n' +
      '}\n',
    sourcePath: '/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Faucet5.sol',
    ast: {
      absolutePath: '/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Faucet5.sol',
      exportedSymbols: [Object],
      id: 54,
      license: 'MIT',
      nodeType: 'SourceUnit',
      nodes: [Array],
      src: '32:1130:0'
    },
    legacyAST: {
      absolutePath: '/home/victor/Projects/ethereum/solidity_playground/mastering_ethereum/truffle/Faucet5/contracts/Faucet5.sol',
      exportedSymbols: [Object],
      id: 54,
      license: 'MIT',
      nodeType: 'SourceUnit',
      nodes: [Array],
      src: '32:1130:0'
    },
    compiler: {
      name: 'solc',
      version: '0.6.10+commit.00c0fcaf.Emscripten.clang'
    },
    networks: { '5777': [Object] },
    schemaVersion: '3.2.0',
    updatedAt: '2020-06-18T15:13:31.425Z',
    networkType: 'ethereum',
    devdoc: {
      author: 'Victor Navascues',
      details: 'Inherits from Mortal5 and implements withdrawal',
      methods: [Object],
      title: 'Mastering Ethereum Chapter 6, Faucet contract v5-8'
    },
    userdoc: {
      methods: [Object],
      notice: 'Faucet4 applying contract inheritance, error handling, events, and NatSpec documentation'
    },
    numberFormat: 'BN'
  },
  configureNetwork: [Function: bound configureNetwork],
  setProvider: [Function: bound setProvider],
  new: [Function: bound new] {
    estimateGas: [Function: bound estimateDeployment]
  },
  at: [Function: bound at] AsyncFunction,
  deployed: [Function: bound deployed] AsyncFunction,
  defaults: [Function: bound defaults],
  hasNetwork: [Function: bound hasNetwork],
  isDeployed: [Function: bound isDeployed],
  detectNetwork: [Function: bound detectNetwork] AsyncFunction,
  setNetwork: [Function: bound setNetwork],
  setNetworkType: [Function: bound setNetworkType],
  setWallet: [Function: bound setWallet],
  resetAddress: [Function: bound resetAddress],
  link: [Function: bound link],
  clone: [Function: bound clone],
  addProp: [Function: bound addProp],
  toJSON: [Function: bound toJSON],
  decodeLogs: [Function: bound decodeLogs],
  class_defaults: {
    from: '0x5E1e93B6D25690B7A26d70468f81d5b6441885c4',
    gas: 6721975,
    gasPrice: 20000000000
  },
  interfaceAdapter: Web3InterfaceAdapter {
    web3: Web3Shim {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HttpProvider],
      setProvider: [Function],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      version: '1.2.1',
      utils: [Object],
      eth: [Eth],
      shh: [Shh],
      bzz: [Bzz],
      networkType: 'ethereum'
    }
  },
  web3: Web3Shim {
    currentProvider: [Getter/Setter],
    _requestManager: RequestManager {
      provider: [HttpProvider],
      providers: [Object],
      subscriptions: {}
    },
    givenProvider: null,
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    _provider: HttpProvider {
      host: 'http://127.0.0.1:9545/',
      httpAgent: [Agent],
      timeout: 0,
      headers: undefined,
      connected: true,
      send: [Function],
      _alreadyWrapped: true
    },
    setProvider: [Function],
    BatchRequest: [Function: bound Batch],
    extend: [Function: ex] {
      formatters: [Object],
      utils: [Object],
      Method: [Function: Method]
    },
    version: '1.2.1',
    utils: {
      _fireError: [Function: _fireError],
      _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
      _flattenTypes: [Function: _flattenTypes],
      randomHex: [Function: randomHex],
      _: [Function],
      BN: [Function],
      isBN: [Function: isBN],
      isBigNumber: [Function: isBigNumber],
      isHex: [Function: isHex],
      isHexStrict: [Function: isHexStrict],
      sha3: [Function],
      keccak256: [Function],
      soliditySha3: [Function: soliditySha3],
      isAddress: [Function: isAddress],
      checkAddressChecksum: [Function: checkAddressChecksum],
      toChecksumAddress: [Function: toChecksumAddress],
      toHex: [Function: toHex],
      toBN: [Function: toBN],
      bytesToHex: [Function: bytesToHex],
      hexToBytes: [Function: hexToBytes],
      hexToNumberString: [Function: hexToNumberString],
      hexToNumber: [Function: hexToNumber],
      toDecimal: [Function: hexToNumber],
      numberToHex: [Function: numberToHex],
      fromDecimal: [Function: numberToHex],
      hexToUtf8: [Function: hexToUtf8],
      hexToString: [Function: hexToUtf8],
      toUtf8: [Function: hexToUtf8],
      utf8ToHex: [Function: utf8ToHex],
      stringToHex: [Function: utf8ToHex],
      fromUtf8: [Function: utf8ToHex],
      hexToAscii: [Function: hexToAscii],
      toAscii: [Function: hexToAscii],
      asciiToHex: [Function: asciiToHex],
      fromAscii: [Function: asciiToHex],
      unitMap: [Object],
      toWei: [Function: toWei],
      fromWei: [Function: fromWei],
      padLeft: [Function: leftPad],
      leftPad: [Function: leftPad],
      padRight: [Function: rightPad],
      rightPad: [Function: rightPad],
      toTwosComplement: [Function: toTwosComplement]
    },
    eth: Eth {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HttpProvider],
      setProvider: [Function],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      defaultAccount: [Getter/Setter],
      defaultBlock: [Getter/Setter],
      clearSubscriptions: [Function],
      net: [Net],
      accounts: [Accounts],
      personal: [Personal],
      Contract: [Function],
      Iban: [Function],
      abi: ABICoder {},
      ens: [ENS],
      getNodeInfo: [Function],
      getProtocolVersion: [Function],
      getCoinbase: [Function],
      isMining: [Function],
      getHashrate: [Function],
      isSyncing: [Function],
      getGasPrice: [Function],
      getAccounts: [Function],
      getBlockNumber: [Function],
      getBalance: [Function],
      getStorageAt: [Function],
      getCode: [Function],
      getBlock: [Function],
      getUncle: [Function],
      getBlockTransactionCount: [Function],
      getBlockUncleCount: [Function],
      getTransaction: [Function],
      getTransactionFromBlock: [Function],
      getTransactionReceipt: [Function],
      getTransactionCount: [Function],
      sendSignedTransaction: [Function],
      signTransaction: [Function],
      sendTransaction: [Function],
      sign: [Function],
      call: [Function],
      estimateGas: [Function],
      submitWork: [Function],
      getWork: [Function],
      getPastLogs: [Function],
      subscribe: [Function]
    },
    shh: Shh {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HttpProvider],
      setProvider: [Function],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      net: [Net],
      subscribe: [Function],
      getVersion: [Function],
      getInfo: [Function],
      setMaxMessageSize: [Function],
      setMinPoW: [Function],
      markTrustedPeer: [Function],
      newKeyPair: [Function],
      addPrivateKey: [Function],
      deleteKeyPair: [Function],
      hasKeyPair: [Function],
      getPublicKey: [Function],
      getPrivateKey: [Function],
      newSymKey: [Function],
      addSymKey: [Function],
      generateSymKeyFromPassword: [Function],
      hasSymKey: [Function],
      getSymKey: [Function],
      deleteSymKey: [Function],
      newMessageFilter: [Function],
      getFilterMessages: [Function],
      deleteMessageFilter: [Function],
      post: [Function],
      unsubscribe: [Function]
    },
    bzz: Bzz {
      givenProvider: null,
      currentProvider: null,
      isAvailable: [Function],
      upload: [Function],
      download: [Function]
    },
    networkType: 'ethereum'
  },
  currentProvider: HttpProvider {
    host: 'http://127.0.0.1:9545/',
    httpAgent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: {},
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      [Symbol(kCapture)]: false
    },
    timeout: 0,
    headers: undefined,
    connected: true,
    send: [Function],
    _alreadyWrapped: true
  },
  network_id: '5777',
  ens: { enabled: false, registryAddress: null }
}
